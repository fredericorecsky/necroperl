#!/usr/bin/env perl

use strict;
use warnings;

use Cwd qw/abs_path cwd getcwd/;
use File::Basename;

BEGIN {
    my $abs_path = dirname( dirname ( abs_path( $0 ) ) );
    push @INC, $abs_path . "/lib";
}

use Cwd;
use File::Basename;
use Necromancer;
use Term::ANSIColor;
use Sys::Hostname;

$| = 1;

binmode(STDOUT, ":utf8");

my ( $status ) = @ARGV;

my $necro = Necromancer->new();

my %unicode = (
    proxy   => "\x{2638}",
    cloud   => "\x{2601}",
    local   => "\x{2602}",
    #star    => "\x{2605}",
    star    => "\x{2739}",
    error   => "\x{2716}",
    ok      => "\x{2714}",
    block   => "\x{220E}",
    storage => "\x{26C1}",
    connect => "\x{260D}",
    left    => "\x{276A}",
    right   => "\x{276B}",
    git     => "\x{26C0}",
    1       => "\x{2460}",
    2       => "\x{2461}",
    3       => "\x{2462}",
    4       => "\x{2463}",
    5       => "\x{2464}",
    6       => "\x{2465}",
    7       => "\x{2466}",
    8       => "\x{2467}",
    9       => "\x{2468}",
    10      => "\x{2469}",
);
print "\n";
status();
print " ";
host_dir();
print " [";
    proxy_info();
    rperl();
    git_info();
print "]\n";
print " :";

sub status { 
    if ( $status ) {
        print color( 'rgb511' );
        print $unicode{ error };
        print " $status ";
    }else{
        print color( 'rgb353' );
        print $unicode{ ok };
    }
    print color('reset' );
}

sub host_dir {
    my $hostname = hostname();
    my $cwd = getcwd();
    my $ssh = ( $ENV{SSH_CLIENT} || $ENV{ SSH_TTY } ) ? 1 : 0;
    print color( 'reset' );
    print " $unicode{ storage } ";
    print color( 'rgb335' );
    print " $unicode{ cloud } " if $ssh;
    print " $hostname: " if ( $necro->{ _show_localhost } || $ssh );
    print color( 'reset' );
    if ( $cwd =~ /^$ENV{ HOME }(.*)/ ) {
        print "~$1";
    }else{
        print $cwd;
    }
}

sub git_info {
    my $git_toplevel = `git rev-parse --show-toplevel 2>/dev/null`;
    if ( !$? ){
        my ( $git_branch ) = `git rev-parse --abbrev-ref HEAD 2>/dev/null`; 
        $git_branch =~ s/\*\s+//;
        chomp $git_branch;
        my @remotes = `git remote -v`;
        my $origin;
        for my $remote ( @remotes ) {
            my ( $name, $server ) = split ( /\s/, $remote );
            $origin = basename $server;
        }
        print color( 'magenta' );
        print $unicode{ git };
        print $origin ? " $origin:" : " :" ;
        print color( 'cyan' );
        print "$git_branch";
        print color( 'reset' );
    }
}

sub proxy_info {
    $necro->{ proxy_vars } = {
        http_proxy      => $ENV{ http_proxy },
        https_proxy     => $ENV{ https_proxy },
        HTTP_PROXY      => $ENV{ HTTP_PROXY },
        HTTPS_PROXY     => $ENV{ HTTPS_PROXY },
    };

    for my $var ( values %{ $necro->{ proxy_vars } } ) {
        $necro->{ proxy_active } ++ if $var;
    }

    if( $necro->{ proxy_active } ) {
        print color( 'rgb552');
        print " $unicode{ proxy } ";
        print color( 'reset' );
    }
    
}

# TODO move to rperl
sub rperl {
    if ( $necro->{ remote } ) {
        print color( 'rgb335' );
        print " $unicode{ cloud }$necro->{ remote } ";
        print color( 'reset' );
    }
}



