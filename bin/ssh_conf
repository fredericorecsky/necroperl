#!/usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use Cwd qw/abs_path cwd getcwd/;
use File::Basename;

use Getopt::Long;
use Term::ANSIColor;

BEGIN {
    my $abs_path = dirname( dirname ( abs_path( $0 ) ) );
    push @INC, $abs_path . "/lib";
}

use Necromancer;

my $necro = Necromancer->new();

my $filter;
my $dump;
my $options = { };

GetOptions (
    "filter=s"  => \$filter,
    "dump"      => \$dump,
    "test"      => \$options->{ mark_online_hosts },
);

print "Filter: $filter\n" if $filter;

my @ssh_keywords = qw/
    ForwardAgent
    Hostname
    User
    ServerAliveInterval
    ForwardX11
    HashKnownHosts
    ProxyCommand
/;

my %ssh_tokens = (
    host                => \&host,
    Host                => \&host,
);

for my $keyword ( @ssh_keywords ) {
    $ssh_tokens{ $keyword } = lvalue( $keyword );
}

my $ssh_config = parse( "$ENV{ HOME }/.ssh/config" );

for my $option ( keys %{ $options } ) {
    $ssh_config->$option() if $options->{ $option };
}

$ssh_config->show_hosts();

print Dumper $ssh_config if $dump;

sub parse {
    my ( $default_ssh_config ) = @_;
    if ( ! -e $default_ssh_config ) {
        print "$default_ssh_config does not exists\n";
        exit;
    }
    open my $fh ,"<", $default_ssh_config or die "could not open $default_ssh_config\n";
    my $ssh_config = bless {};
    while( my $line = <$fh> ){
        chomp $line;
        $line =~ s/^(\s+)//;
        my @tokens = split( /\s+/, $line );
        next if ! @tokens;
        my $keyword = $tokens[0];
        if ( $keyword && exists $ssh_tokens{ $keyword } ) {
            $ssh_tokens{ $keyword }->( $ssh_config, @tokens );
        }
    }
    close $fh;
    return $ssh_config;
}

sub show_hosts {
    my ( $ssh_config ) = @_;

    if( exists $ssh_config->{ hosts } ) {
        for my $host ( sort { $a cmp $b } keys %{ $ssh_config->{ hosts } } ) {
            for my $alias ( @{ $ssh_config->{ hosts }{ $host }{ alias } } ){
                next if ( $filter && $alias !~ /$filter/ );
                print $ssh_config->{ hosts }{ $host }{ _online } ?
                    color( 'rgb252' ) :
                    color( 'rgb335' ) ;
                print sprintf( '%-15.15s', $alias );
                print color( 'white' );
                print "\t$host\n"
            }
        }
    }
}

sub mark_online_hosts {
    my ( $ssh_config ) = @_;
    if ( exists $ssh_config->{ hosts } ) {
        for my $host ( keys %{ $ssh_config->{ hosts } } ) {
            # must have an alias
            if ( @{ $ssh_config->{ hosts }{ $host }{ alias } } ){
                my $alias = $ssh_config->{ hosts }{ $host }{ alias }[0];
                if( $necro->check_host( $alias ) ) {
                    $ssh_config->{ hosts }{ $host }{ _online } = 1;
                }
            }
        }
    }
}

sub host {
    my ( $ssh_config, @tokens ) = @_;

    shift @tokens;
    my $hostname = pop @tokens;
    $ssh_config->{ hosts }{ $hostname } = {
        alias => [ @tokens ],
    };
    $ssh_config->{ _actual_host } = $hostname;
}

sub _actual_host {
    my ( $ssh_config ) = @_;
    die "error parsing ssh config file\n" if !$ssh_config->{ _actual_host };
}

sub lvalue {
    my ( $name ) = @_;
    return sub {
        my ( $self, @tokens ) = @_;
        $self->_lvalue( $name ,  @tokens );
    }
}

sub forwardagent {
    my ( $ssh_config, @tokens ) = @_;
    $_[0]->_lvalue( 'ForwardAgent' , @tokens );
}

sub _lvalue {
    my ( $ssh_config, $key, @tokens ) = @_;
    $ssh_config->_actual_host();
    $ssh_config->{ hosts }{ $ssh_config->{ _actual_host } }{ $key } = join ' ', @tokens;
}
